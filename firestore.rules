rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is an admin
    function isAdmin() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if user is accessing their own document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection rules
    match /users/{userId} {
      // Users can read their own document
      // Authenticated users can read other users' email and role (for verification)
      allow read: if isAuthenticated();

      // Users can only create their own document during registration
      // Must include required fields: email, role, createdAt
      allow create: if isOwner(userId) &&
                       request.resource.data.keys().hasAll(['email', 'role', 'createdAt']) &&
                       request.resource.data.role == 'member' &&
                       request.resource.data.email == request.auth.token.email;

      // Users can update their own document (except role)
      // Admins can update any user's document (including role)
      allow update: if (isOwner(userId) && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role'])) ||
                       isAdmin();

      // Only admins can delete user documents
      allow delete: if isAdmin();
    }

    // Books collection rules
    match /books/{bookId} {
      // All authenticated users can read all books
      allow read: if isAuthenticated();

      // Authenticated users can create books
      // Must include required fields: isbn, name
      allow create: if isAuthenticated() &&
                       request.resource.data.keys().hasAll(['isbn', 'name']) &&
                       request.resource.data.isbn is number &&
                       request.resource.data.name is string;

      // Authenticated users can update books
      // Can only update isbn and name fields
      allow update: if isAuthenticated() &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isbn', 'name', 'updatedAt']) &&
                       request.resource.data.isbn is number &&
                       request.resource.data.name is string;

      // Authenticated users can delete books
      // Consider restricting to admins only if needed
      allow delete: if isAuthenticated();
    }
  }
}